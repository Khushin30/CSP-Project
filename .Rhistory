labs(title = "Scatterplot of Moon vs. Net Change") +
theme_minimal()
# lets see which variables are relevant to predicting the net change
library(corrplot)
library(ggplot2)
correlation_matrix <- cor(processed_data[, c("moon", "slash", "plus", "star", "two", "flare")], processed_data[, "net_change"])
corrplot(correlation_matrix, method = "color")
# lets see which variables are relevant to predicting the net change
library(corrplot)
library(ggplot2)
correlation_matrix <- cor(processed_data[, c("moon", "slash", "plus", "star", "two", "flare")], processed_data[, "net_change"])
corrplot(correlation_matrix, method = "color")
library(psych)
# Assuming 'processed_data' is your dataframe containing the variables
data_subset <- processed_data[, c("moon", "slash", "plus", "star", "two", "flare", "net_change")]
# Remove missing values
data_subset <- na.omit(data_subset)
# Visualize scatterplot matrix using pairs.panels
pairs.panels(data_subset,
method = "pearson",  # Use Pearson correlation method
hist.col = "#00AFBB",  # Color of histogram bars
density = TRUE  # Add density plots on the diagonal
)
# lets see which variables are relevant to predicting the net change
library(corrplot)
library(ggplot2)
correlation_matrix <- cor(processed_data[, c("moon", "slash", "plus", "star", "two", "flare")], processed_data[, "net_change"])
corrplot(correlation_matrix, method = "color")
library(psych)
data_subset <- processed_data[, c("moon", "slash", "plus", "star", "two", "flare", "net_change")]
# Remove missing values
data_subset <- na.omit(data_subset)
# Compute correlation matrix
correlation_matrix <- cor(data_subset)
# Extract correlations with 'net_change'
net_change_correlations <- correlation_matrix["net_change", -7]  # Exclude 'net_change' itself
# Create a dataframe with 'net_change' correlations
net_change_corr_df <- data.frame(variable = names(net_change_correlations),
correlation = net_change_correlations)
# Visualize scatterplot matrix for correlations with 'net_change'
pairs.panels(net_change_corr_df,
method = "pearson",  # Use Pearson correlation method
hist.col = "#00AFBB",  # Color of histogram bars
density = TRUE  # Add density plots on the diagonal
)
# lets see which variables are relevant to predicting the net change
library(corrplot)
library(ggplot2)
correlation_matrix <- cor(processed_data[, c("moon", "slash", "plus", "star", "two", "flare")], processed_data[, "net_change"])
corrplot(correlation_matrix, method = "color")
library(psych)
data_subset <- processed_data[, c("moon", "slash", "plus", "star", "two", "flare", "net_change")]
# Remove missing values
data_subset <- na.omit(data_subset)
# Compute correlation matrix
correlation_matrix <- cor(data_subset)
# Extract correlations with 'net_change'
net_change_correlations <- correlation_matrix["net_change", -7]  # Exclude 'net_change' itself
# Create a dataframe with 'net_change' correlations
net_change_corr_df <- data.frame(variable = names(net_change_correlations),
correlation = net_change_correlations)
# Visualize scatterplot matrix for correlations with 'net_change'
pairs.panels(net_change_corr_df$correlation,
gap = 0,
labels = names(net_change_corr_df),
method = "pearson",  # Use Pearson correlation method
hist.col = "#00AFBB",  # Color of histogram bars
density = TRUE  # Add density plots on the diagonal
)
# lets see which variables are relevant to predicting the net change
library(psych)
pairs.panels(processed_data,
var.labels = net_change,
method = "pearson",
lm = TRUE, # Add linear regression lines
ellipses = TRUE, # Add density ellipses
stars = TRUE # Add significance stars
)
# Let's see the frequencies for each column
frequency_tables <- lapply(main_data[,c("moon", "slash", "plus", "star", "two", "flare")] table)
# Let's see the frequencies for each column
frequency_tables <- lapply(main_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
# Let's see the frequencies for each column
frequency_tables <- lapply(main_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$close-main_data$open
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
processed_data <- cbind(processed_data,main_data[, c("Date", "moon", "slash", "plus", "star", "two", "flare")])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
columns_to_balance <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) > 0)   # Assuming minority class is where at least one column is 1
columns_to_balance <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# GPT generated code
columns_to_balance <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset
frequency_tables <- lapply(balanced_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# GPT generated code
columns_to_balance <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
pairs.panels(balanced_data,
var.labels = net_change,
method = "pearson",
lm = TRUE, # Add linear regression lines
ellipses = TRUE, # Add density ellipses
stars = TRUE # Add significance stars
)
# lets see which variables are relevant to predicting the net change
correlation_coefficients <- sapply(balanced_data[columns_to_balance], function(column) cor(column, balanced_data$net_change))
# Print correlation coefficients
print(correlation_coefficients)
# Create scatterplots
par(mfrow=c(2, 3))  # Set up a 2x3 grid for plots
for (col in columns_to_balance) {
plot(balanced_data[[col]], balanced_data$net_change,
xlab = col, ylab = "net_change",
main = paste("Scatterplot of", col, "vs. net_change"))
}
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(columns_to_balance, "net_change")
# Create pairs plot
pairs.panels(balanced_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(balanced_data[columns_to_balance]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(balanced_data[c("has_solar_event", "net_change")], main = "Pairs Plot of any_1 vs. net_change")
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$close-main_data$open
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
processed_data <- cbind(processed_data,main_data[, c("Date", "moon", "slash", "plus", "star", "two", "flare")])
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
processed_data <- cbind(processed_data,main_data[, c("Date", "moon", "slash", "plus", "star", "two", "flare")])
processed_data
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
processed_data <- cbind(processed_data,main_data[, c("Date", "moon", "slash", "plus", "star", "two", "flare")])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# GPT generated code
columns_to_balance <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(columns_to_balance, "net_change")
# Create pairs plot
pairs.panels(balanced_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(balanced_data[columns_to_balance]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(balanced_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
predictor_columns <- c("moon", "slash", "plus", "star", "two", "flare")
majority_class <- subset(processed_data, rowSums(processed_data[columns_to_balance]) == 0)  # Assuming majority class is where all columns are 0
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(balanced_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(balanced_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(balanced_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "lunar", "solar")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,c("moon", "slash", "plus", "star", "two", "flare")], table)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "lunar", "solar", "flares")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(balanced_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(balanced_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(balanced_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(balanced_data[predictor_columns]) > 0, 1, 0)
balanced_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("change_cat", "moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
balanced_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
processed_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(balanced_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
processed_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(processed_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
processed_data
linear_model <- lm(processed_data~. - has_solar_event)
linear_model <- lm(processed_data ~ . - has_solar_event)
linear_model <- lm(net_change ~ . - has_solar_event, data = processed_data)
summary(linear_model)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
processed_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(processed_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
linear_model <- lm(net_change ~ . - has_solar_event, data = processed_data)
summary(linear_model)
# lets see the first 10 of the data we're working with
main_data <- read.csv("./Data Files/data_aal.csv")
head(main_data, 10)
# lets record the change in the stocks value as net_change and create a new df with it
net_change <- main_data$change
processed_data <- data.frame(net_change)
# lets also carry over the values from the Date, moon, slash, plus, star, two, and flare columns
predictor_columns <- c("moon", "slash", "plus", "star", "two", "lunar", "solar", "flare")
processed_data <- cbind(processed_data,main_data[, predictor_columns])
processed_data <- na.omit(processed_data)
processed_data
# Let's see the frequencies for each column
frequency_tables <- lapply(processed_data[,predictor_columns], table)
frequency_tables
# GPT generated code
majority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) == 0)  # Assuming majority class is where all columns are 0
minority_class <- subset(processed_data, rowSums(processed_data[predictor_columns]) > 0)   # Assuming minority class is where at least one column is 1
undersampled_majority <- majority_class[sample(nrow(majority_class), nrow(minority_class), replace = FALSE), ]
# Combine undersampled majority class and minority class
balanced_data <- rbind(undersampled_majority, minority_class)
# lets see how the data is distributed now in our balanced dataset and shuffle it
balanced_data <- balanced_data[sample(nrow(balanced_data)), ]
frequency_tables <- lapply(balanced_data[,predictor_columns], table)
frequency_tables
# lets see which variables are relevant to predicting the net change
library(psych)
columns_for_pairs <- c(predictor_columns, "net_change")
# Create pairs plot
pairs.panels(processed_data[columns_for_pairs], main = "Pairs Plot of Columns vs. net_change")
processed_data$has_solar_event = ifelse(rowSums(processed_data[predictor_columns]) > 0, 1, 0)
# now lets see if this can show us any correlations
pairs.panels(processed_data[c("has_solar_event", "net_change")], main = "Pairs Plot of Solar Event vs. net_change")
linear_model <- lm(net_change ~ . - has_solar_event, data = processed_data)
summary(linear_model)
